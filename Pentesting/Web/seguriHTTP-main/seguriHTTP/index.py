import tkinter as tk
from tkinter import messagebox, scrolledtext
import requests
import ssl
import socket
from urllib.parse import urlparse
from base64 import urlsafe_b64encode

VIRUSTOTAL_API_KEY = 'TU_API_KEY'

def is_https(url):
    return url.startswith("https://")

def check_spelling(url):
    suspicious_patterns = ['0', '@', '%', '&', '$', '=', '+', '#', '!', '~']
    domain = urlparse(url).netloc
    if len(domain) > 50 or any(char in domain for char in suspicious_patterns):
        return True
    return False

def check_domain_legitimacy(domain):
    known_legit_domains = ['google.com', 'microsoft.com', 'facebook.com', 'github.com']
    for legit in known_legit_domains:
        if legit in domain and not domain.endswith(legit):
            return False
    return True

def check_ssl_cert(url):
    try:
        hostname = urlparse(url).hostname
        context = ssl.create_default_context()
        with socket.create_connection((hostname, 443)) as sock:
            with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                ssock.getpeercert()
        return True
    except Exception:
        return False

def scan_with_virustotal(url):
    try:
        headers = {"x-apikey": VIRUSTOTAL_API_KEY}
        encoded_url = urlsafe_b64encode(url.encode()).decode().strip("=")
        report_url = f"https://www.virustotal.com/api/v3/urls/{encoded_url}"
        response = requests.get(report_url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            stats = data['data']['attributes']['last_analysis_stats']
            malicious = stats['malicious']
            suspicious = stats['suspicious']
            if malicious > 0 or suspicious > 0:
                return False, malicious, suspicious
            return True, malicious, suspicious
        return None, 0, 0
    except Exception:
        return None, 0, 0

def analyze_url_gui():
    url = entry.get().strip()
    if not url:
        messagebox.showerror("Error", "Por favor ingresa una URL.")
        return

    domain = urlparse(url).netloc
    https = is_https(url)
    spelling = check_spelling(url)
    legit = check_domain_legitimacy(domain)
    ssl_valid = check_ssl_cert(url)
    vt_safe, malicious, suspicious = scan_with_virustotal(url)

    result = f"🔍 Análisis de URL: {url}\n\n"
    score = 0 

    result += f"🔐 HTTPS válido: {'✅' if https else '❌'}\n"
    if https: score += 1

    result += f"📏 Ortografía sospechosa: {'⚠️' if spelling else '✅'}\n"
    if not spelling: score += 1

    result += f"🧩 Dominio legítimo: {'✅' if legit else '❌'}\n"
    if legit: score += 1

    result += f"📄 Certificado SSL válido: {'✅' if ssl_valid else '❌'}\n"
    if ssl_valid: score += 1

    if vt_safe is not None:
        result += f"🦠 VirusTotal - Maliciosos: {malicious} / Sospechosos: {suspicious}\n"
        result += f"🔒 VirusTotal: {'✅ Seguro' if vt_safe else '⚠️ Peligroso'}\n"
        if vt_safe: score += 1
    else:
        result += "❓ No se pudo verificar con VirusTotal.\n"

    result += "\n📌 Recomendaciones:\n"
    if not https:
        result += "➡️ Usa siempre HTTPS para conexiones seguras.\n"
    if spelling:
        result += "➡️ Revisa caracteres extraños o errores en la URL.\n"
    if not legit:
        result += "➡️ Este dominio puede estar suplantando uno confiable.\n"
    if not ssl_valid:
        result += "➡️ El certificado SSL no es válido o está vencido.\n"
    if vt_safe is False:
        result += "🚨 No abras este enlace. Posible phishing o malware.\n"
    elif vt_safe is None:
        result += "➡️ Analiza esta URL manualmente o con otra herramienta.\n"


    if score >= 3:
        window.configure(bg="light green")  # 🟢 Seguro
    else:
        window.configure(bg="salmon")       # 🔴 Riesgoso

    output.delete(1.0, tk.END)
    output.insert(tk.END, result)


window = tk.Tk()
window.title("Detector de Enlaces Sospechosos")
window.geometry("600x500")
window.configure(bg="lightgray")

label = tk.Label(window, text="🔗 Ingresa una URL para analizar:", font=("Arial", 12), bg="lightgray")
label.pack(pady=10)

entry = tk.Entry(window, width=60)
entry.pack(pady=5)

button = tk.Button(window, text="Analizar", command=analyze_url_gui, bg="green", fg="white")
button.pack(pady=10)

output = scrolledtext.ScrolledText(window, width=70, height=20, font=("Courier", 10))
output.pack(pady=10)

window.mainloop()
